import React, { useState } from "react";
import "../style/styles.css"

const QuizModal = ({ onClose }) => {
  const [step, setStep] = useState(0);
  const [category, setCategory] = useState("");
  const [answers, setAnswers] = useState({});
  const [contact, setContact] = useState({ name: "", phone: "" });
  const [submitted, setSubmitted] = useState(false);

  const questions = {
    kitchen: ["–Ø–∫–∏–π —Ä–æ–∑–º—ñ—Ä –∫—É—Ö–Ω—ñ?", "–ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞?", "–í–∞—à –±—é–¥–∂–µ—Ç?"],
    living: ["–Ø–∫–∏–π —Å—Ç–∏–ª—å –≤–∞–º –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?", "–ü–æ—Ç—Ä—ñ–±–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è?", "–í–∞—à –±—é–¥–∂–µ—Ç?"],
    bedroom: ["–°–∫—ñ–ª—å–∫–∏ –º—ñ—Å—Ü—å –¥–ª—è —Å–Ω—É –ø–æ—Ç—Ä—ñ–±–Ω–æ?", "–Ø–∫–∏–π —Ä–æ–∑–º—ñ—Ä –∫—ñ–º–Ω–∞—Ç–∏?", "–ë–∞–∂–∞–Ω–∏–π —Å—Ç–∏–ª—å?"],
  };

  const handleNext = (answer) => {
    if (step === 0) {
      setCategory(answer);
    } else {
      setAnswers((prev) => ({ ...prev, [`q${step}`]: answer }));
    }
    setStep(step + 1);
  };

  const handleSubmit = async () => {
    const message = `
  <b>üõãÔ∏è –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑ –∫–≤—ñ–∑—É</b>
  <b>–ö—ñ–º–Ω–∞—Ç–∞:</b> ${category}
  ${Object.entries(answers)
      .map(([key, val], i) => `<b>–ü–∏—Ç–∞–Ω–Ω—è ${i + 1}:</b> ${val}`)
      .join("\n")}
  <b>–Ü–º º—è:</b> ${contact.name}
  <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${contact.phone}
  `;
  
    try {
      const res = await fetch("/api/sendToTelegram", {
        method: "POST",
        body: JSON.stringify({ message }),
      });
  
      if (res.ok) {
        setSubmitted(true);
      } else {
        alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ Telegram");
      }
    } catch (error) {
      console.error(error);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏");
    }
  };

  const currentQuestions = questions[category];
  const question = currentQuestions?.[step - 1];

  const renderStep = () => { 
    if (submitted) {
      return (
      <>
      <p className="quiz-title">–î—è–∫—É—î–º–æ! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å üëå</p>;
      <button className="quiz-button" onClick={() => onClose()}>–ó–∞–∫—Ä–∏—Ç–∏</button>
      </>
    );
  }

    if (step === 0) {
      return (
        <>
          <h2 className="quiz-title">–Ø–∫—É –∫—ñ–º–Ω–∞—Ç—É –º–µ–±–ª—é—î—Ç–µ?</h2>
          <div className="quiz-buttons">
            <button onClick={() => handleNext("kitchen")}>–ö—É—Ö–Ω—è</button>
            <button onClick={() => handleNext("living")}>–í—ñ—Ç–∞–ª—å–Ω—è</button>
            <button onClick={() => handleNext("bedroom")}>–°–ø–∞–ª—å–Ω—è</button>
          </div>
        </>
      );
    }

    if (step <= currentQuestions.length) {
      return (
        <>
        <h2 className="quiz-title">{question}</h2>
        <input
        className="quiz-input"
        type="text"
        placeholder="–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
        onKeyDown={(e) => {
          if (e.key === "Enter")
          handleNext(e.target.value);
        }
        }
        />
        </>
      )
    }

    return (
      <>
        <h2 className="quiz-title">–ó–∞–ª–∏—à—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç</h2>
        <input
          className="quiz-input"
          placeholder="–í–∞—à–µ —ñ–º'—è"
          value={contact.name}
          onChange={(e) => setContact({ ...contact, name: e.target.value })}
        />
        <input
          className="quiz-input"
          placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
          value={contact.phone}
          onChange={(e) => setContact({ ...contact, phone: e.target.value })}
        />
        <button
          onClick={handleSubmit}
          className="quiz-button"
          disabled={!contact.name || !contact.phone}
        >
          –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
        </button>
      </>
    );
  };

  return (
    <div className="quiz-overlay">
      <div className="quiz-modal">
        <button
          onClick={onClose}
          className="quiz-close"
        >
          √ó
        </button>
        {renderStep()}
      </div>
    </div>
  );
};

export default QuizModal;
